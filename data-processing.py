# -*- coding: utf-8 -*-
"""teamproject_1016.ipynb의 사본

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17170hg8ovHPC5IInBVNaFeD1Tqyd0y61

# 라이브러리
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib.font_manager as fm
import numpy as np
import random as rd
from datetime import datetime
import os
import re

from google.colab import drive
drive.mount('/content/drive')

input_oid = np.int64(input("owner_id : "))

"""# 라이브러리"""

path = '/content/drive/MyDrive/pungoo'
file_list = os.listdir(path)

uid_dic = {}
for file_name in file_list :
  if (str(input_oid) in str(file_name)):
    file_path = path + '/' + file_name
    data = pd.read_csv(file_path, encoding='cp949')
    oid = data['owner_id'][0]
    break

tempname=""
plural=False
for i,row in data.iterrows():
  if ((type(row['Message_1'])==str) and ("님" in row['Message_1'])):    # 순이와 대화를 했다면
    if(plural==False):
      index=int(row['Message_1'].find("님"))
      tempname=row['Message_1'][index-2:index]
      plural=True
    if (plural==True):
      index=row['Message_1'].find("님")
      if (tempname==row['Message_1'][index-2:index] or "선생"==row['Message_1'][index-2:index]):
        name=tempname
        break

res_str = "{"
for tkey,tval in uid_dic.items() :
  if tval :
    res_str += f'\"id{tkey}\":true,'
  else :
    res_str += f'\"id{tkey}\":false,'
res_str = res_str[:-1]
res_str += "}"
print (res_str)

"""# 각 시간대에 하고있는 행동"""

path = '/content/drive/MyDrive/pungoo'
file_list = os.listdir(path)
valid_act_list = []
uid_time_act_dic = {}
total_time_act_dic = {}
for i in range(24):
  total_time_act_dic[i]={}
for file_name in file_list :
  file_path = path + '/' + file_name
  data = pd.read_csv(file_path, encoding='cp949')
  if (len(data) <= 0) :
    # print(f'{file_path}에 데이터가 없습니다.')
    continue
  oid = data['owner_id'][0]
  uid_time_act_dic[oid] = {}
  for i in range(24):
    uid_time_act_dic[oid][i]={}

  prevHour = -1
  prevAct = ''
  for i,row in data.iterrows():
    # if row['Act'] is in valid_act_list :    # 유효한 행동이라면
    actHour = datetime.fromisoformat(row['Time'].replace('\'','')).hour
    act = row['Act']
    if (prevHour >= 0 and prevHour < actHour) :
        for j in range(prevHour, actHour):
          if prevAct not in uid_time_act_dic[oid][j]:
            uid_time_act_dic[oid][j][prevAct] = 0
          if prevAct not in total_time_act_dic[j]:
            total_time_act_dic[j][prevAct] = 0
          uid_time_act_dic[oid][j][prevAct] += 1
          total_time_act_dic[j][prevAct] += 1
    
    prevHour = (actHour + 1) % 24
    prevAct = act

    if act not in uid_time_act_dic[oid][actHour]:
      uid_time_act_dic[oid][actHour][act] = 0
    if act not in total_time_act_dic[actHour]:
      total_time_act_dic[actHour][act] = 0
    uid_time_act_dic[oid][actHour][act] += 1 # count +1
    total_time_act_dic[actHour][act] += 1

i=0
plural=False
while (i<24):
  ave_act = max(total_time_act_dic[i], key=total_time_act_dic[i].get)
  if((i==23) or ave_act!=max(total_time_act_dic[i+1], key=total_time_act_dic[i+1].get)):
    if (plural==False):
      print(f'사람들은 보통 {i}시에 {ave_act}을(를) 합니다.')
      i+=1
    else:
      print(f'사람들은 보통 {starting}시부터 {i}시까지 {ave_act}을(를) 합니다.')
      plural=False
      i+=1
  else:
    if (plural==False):
      plural=True
      starting=i
      i+=1
    else:
      i+=1

i=0
plural=False
while (i<24):
  if (len(uid_time_act_dic[input_oid][i]) <= 0 or len(uid_time_act_dic[input_oid][i+1]) <= 0) :
    i+=1
    continue
  ave_act = max(uid_time_act_dic[input_oid][i], key=uid_time_act_dic[input_oid][i].get)
  if((i==23) or ave_act!=max(uid_time_act_dic[input_oid][i+1], key=uid_time_act_dic[input_oid][i+1].get)):
    if (plural==False):
      print(f'{i}시에 {ave_act}을(를) 합니다.')
    else:
      print(f'{starting}시부터 {i}시까지 {ave_act}을(를) 합니다.')
      plural=False
  else:
    if (plural==False):
      plural=True
      starting=i
  i+=1

res_str = "{"
for key in uid_time_act_dic:
  # print(key)
  res_str += f'\"id{key}\":['
  i=0
  plural=False
  isAct=False
  isEmpty=True
  while (i<24):
    if i not in uid_time_act_dic[key] or i+1 not in uid_time_act_dic[key] :
      i+=1
      continue
    if (len(uid_time_act_dic[key][i]) <= 0 or len(uid_time_act_dic[key][i+1]) <= 0) :
      i+=1
      continue
    ave_act = max(uid_time_act_dic[key][i], key=uid_time_act_dic[key][i].get)
    if((i==23) or ave_act!=max(uid_time_act_dic[key][i+1], key=uid_time_act_dic[key][i+1].get)):
      if (plural==False):
        res_str += f'[{i}, {i}, \"{ave_act}\"]'
        isAct=True
        isEmpty=False
      else:
        res_str += f'[{starting}, {i}, \"{ave_act}\"]'
        plural=False
        isAct=True
        isEmpty=False
    else:
      if (plural==False):
        plural=True
        starting=i
    i+=1
    if isAct :
      res_str += ","
      isAct = False
  if isEmpty == False :
    res_str = res_str[:-1]
  res_str += "],"
res_str = res_str[:-1]
res_str += "}"
print(res_str)

"""# 순이와 대화한 평균 횟수"""

path = '/content/drive/MyDrive/pungoo'
file_list = os.listdir(path)
uid_dic = {}
for file_name in file_list :
  file_path = path + '/' + file_name
  data = pd.read_csv(file_path, encoding='cp949')
  if (len(data) <= 0) :
    # print(f'{file_path}에 데이터가 없습니다.')
    continue
  oid = data['owner_id'][0]
  uid_dic[oid] = {}

  for i,row in data.iterrows():
    if type(row['Message_1'])==str :    # 순이와 대화를 했다면
      weeknum = datetime.fromisoformat(row['Time'].replace('\'','')).isocalendar()[1] 
      if weeknum not in uid_dic[oid]:
        uid_dic[oid][weeknum] = 0
      uid_dic[oid][weeknum] += 1 # count +1

totSum=0
deno=0
for key in uid_dic:
  tmpSum=0
  for tkey, tval in uid_dic[key].items() :
    tmpSum += tval
  
  ave_msg = 0
  if len(uid_dic[key]) != 0:
    ave_msg = round(tmpSum/len(uid_dic[key]), 1)
  deno+=1
  totSum+=ave_msg
tot_ave=round((totSum/deno), 1)
res_str = f'전체 평균 대화 횟수는 {tot_ave}회 입니다.'
print (res_str)

tmpSum=0
for tkey, tval in uid_dic[input_oid].items() :
  tmpSum += tval

ave_msg = 0
if len(uid_dic[input_oid]) != 0:
  ave_msg = round(tmpSum/len(uid_dic[input_oid]), 1)

res_str = f'{input_oid} 님의 주당 평균 대화 횟수는 {ave_msg}회 입니다.'
print (res_str)

res_str = "{"
for key in uid_dic:
  tmpSum=0
  for tkey, tval in uid_dic[key].items() :
    tmpSum += tval

  ave_msg = 0
  if len(uid_dic[key]) != 0:
    ave_msg = round(tmpSum/len(uid_dic[key]), 1)

  res_str += f'\"id{key}\":{ave_msg},'
res_str = res_str[:-1]
res_str += "}"
print (res_str)

"""# 약 복용 정보"""

path = '/content/drive/MyDrive/pungoo'
file_list = os.listdir(path)
valid_act_list = []
uid_time_med_dic = {}
total_time_med_dic = []
for i in range(24):
  total_time_med_dic.append(0)

for file_name in file_list :
  file_path = path + '/' + file_name
  data = pd.read_csv(file_path, encoding='cp949')
  if (len(data) <= 0) :
    # print(f'{file_path}에 데이터가 없습니다.')
    continue
  oid = data['owner_id'][0]
  uid_time_med_dic[oid] = []
  for i in range(24):
    uid_time_med_dic[oid].append(0)

  prevHour = -1
  prevAct = ''
  for i,row in data.iterrows():
    if '약' in row['Act'] :    # 약에 관련된 행동이라면
      actHour = datetime.fromisoformat(row['Time'].replace('\'','')).hour
      act = row['Act']

      uid_time_med_dic[oid][actHour] += 1 # count +1
      total_time_med_dic[actHour] += 1

# for i in range(24):
#   print(f'{i}시에는 {total_time_med_dic[i]}번의 약을 먹습니다')
maxval_11 = max(total_time_med_dic[:11])
maxval_23 = max(total_time_med_dic[11:])
print(f'사람들은 보통 오전{total_time_med_dic[:11].index(maxval_11)}시, 오후 {(11+total_time_med_dic[11:].index(maxval_23)-12)}시에 약을 복용합니다.')

res_str = "{"
for key in uid_dic:
  maxval = max(uid_time_med_dic[key])
  # maxval_11 = max(uid_time_med_dic[key][:11])
  # maxval_23 = max(uid_time_med_dic[key][11:])
  # if (maxval_11<12 and maxval_23>=12):
  #   res_str += f'\"id{key}\":[{uid_time_med_dic[key][:11].index(maxval_11)},{(11+uid_time_med_dic[key][11:].index(maxval_23))}],'
  # el
  # if (maxval_11>=12):
  #   res_str += f'\"id{key}\":[{uid_time_med_dic[key].index(maxval_23)}],'
  # elif (maxval_23<12):
  #   res_str += f'\"id{key}\":[{uid_time_med_dic[key].index(maxval_11)}],'
  res_str += f'\"id{key}\":{uid_time_med_dic[key].index(maxval)},'
res_str = res_str[:-1]
res_str += "}"
print (res_str)

"""# 대화내용 분석"""

path = '/content/drive/MyDrive/pungoo'
file_list = os.listdir(path)
uid_dic = {}
for file_name in file_list :
  file_path = path + '/' + file_name
  data = pd.read_csv(file_path, encoding='cp949')
  if (len(data) <= 0) :
    # print(f'{file_path}에 데이터가 없습니다.')
    continue
  oid = data['owner_id'][0]
  for i,row in data.iterrows():
    maxweeknum = -1
    if (type(row['Message_1'])==str  and '프로그램 메시지' not in row['Message_1']) or (type(row['STT_1'])==str):    # 순이와 대화를 했다면
      weeknum = datetime.fromisoformat(row['Time'].replace('\'','')).isocalendar()[1] 
      if weeknum > maxweeknum :
        maxweeknum = weeknum
        if oid not in uid_dic :
          uid_dic[oid] = []
        # if type(row['Message_1'])==str :
          # uid_dic[oid].append(row['Message_1'])
        if type(row['STT_1'])==str :
          uid_dic[oid].append(row['STT_1'])
        # if type(row['Message_2'])==str :
          # uid_dic[oid].append(row['Message_2'])
        if type(row['STT_2'])==str :
          uid_dic[oid].append(row['STT_2'])
        # if type(row['Message_3'])==str :
          # uid_dic[oid].append(row['Message_3'])
        if type(row['STT_3'])==str :
          uid_dic[oid].append(row['STT_3'])
      elif weeknum == maxweeknum:
        # if type(row['Message_1'])==str :
        #   uid_dic[oid].append(row['Message_1'])
        if type(row['STT_1'])==str :
          uid_dic[oid].append(row['STT_1'])
        # if type(row['Message_2'])==str :
        #   uid_dic[oid].append(row['Message_2'])
        if type(row['STT_2'])==str :
          uid_dic[oid].append(row['STT_2'])
        # if type(row['Message_3'])==str :
        #   uid_dic[oid].append(row['Message_3'])
        if type(row['STT_3'])==str :
          uid_dic[oid].append(row['STT_3'])

res_str = "{"
for tkey,tval in uid_dic.items() :
  res_str += f'\"id{tkey}\":['
  for msg in tval:
    res_str += f'\"{msg}\",'
  res_str = res_str[:-1]
  res_str += "],"
res_str = res_str[:-1]
res_str += "}"
print (res_str)

"""# 친밀도"""

path = '/content/drive/MyDrive/pungoo'
file_list = os.listdir(path)
uid_dic = {}
slangs = ['꺼져', '시발', '존나', '닥쳐']
for file_name in file_list :
  file_path = path + '/' + file_name
  data = pd.read_csv(file_path, encoding='cp949')
  if (len(data) <= 0) :
    # print(f'{file_path}에 데이터가 없습니다.')
    continue
  oid = data['owner_id'][0]
  uid_dic[oid] = False
  for i,row in data.iterrows():
    for j in range(len(slangs)) :
      if (type(row['STT_1'])==str and slangs[j] in row['STT_1']) or (type(row['STT_2'])==str and slangs[j] in row['STT_2']) or (type(row['STT_3'])==str and slangs[j] in row['STT_3']) :
        uid_dic[oid] = True

res_str = "{"
for tkey,tval in uid_dic.items() :
  if tval :
    res_str += f'\"id{tkey}\":true,'
  else :
    res_str += f'\"id{tkey}\":false,'
res_str = res_str[:-1]
res_str += "}"
print (res_str)
